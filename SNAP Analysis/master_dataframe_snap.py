# -*- coding: utf-8 -*-
"""Master DataFrame SNAP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_1WYwRmXuJ4ZP-_0XELjnv6T1sK-mXLr
"""

## import modules
## you will need three file assets to run this script:
## -- '/content/Boundaries - Community Areas_20250722.geojson' -- a geojson of community area boundaries in Chicago
## -- '/content/CensusTractsTIGER2010_20250821.csv' -- a list of census tracts mapped onto community areas in Chicago
## -- '/content/Historical SNAP Retailer Locator Data 2004-2024.csv' -- historical SNAP data from US Department of Agriculture
import requests, json
import zipfile
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
from rapidfuzz import fuzz
from google.colab import files
from google.colab import files
from shapely import wkt
from google.colab import files

### AMERICAN COMMUNITY SURVEY DATA###

## grab American Community Survey data from the Census API -- this data pull gathers census tracts in illinois with SNAP data
endpoint = 'https://api.census.gov/data/2023/acs/acs5/subject?get=group(S2201)&ucgid=pseudo(0500000US17031$1400000)'
response = requests.get(endpoint)
data = response.json()

## converts into a dataframe
df = pd.DataFrame(data)

## pushes the first row to column headers
df.columns = df.iloc[0]
df = df[1:].reset_index(drop=True)

## we need the data dictionary to define column headers -- this grabs metadata from the Census API
endpoint2 = 'https://api.census.gov/data/2023/acs/acs5/subject'
response = requests.get(endpoint2)
data_dic = response.json()

## converts into a dataframe
df_dic = pd.DataFrame(data_dic)

## locates the data dictionary that defines each variable from the metadata and assigns the json as 'variables'
data_dictionary= df_dic.at[0,'dataset']
variables = data_dictionary['c_variablesLink']

## gets variables data from the json link
response_var = requests.get(variables)
variable_data = response_var.json()

## converts into a dataframe
df_var = pd.DataFrame(variable_data)

## creates an additional column that only contains the lable information for each index value
df_var['label'] = df_var['variables'].apply(lambda x: x.get('label') if isinstance(x, dict) else None)

## creates a column for the index values and assigns that column header as 'code'
df_var_dict = df_var.reset_index()
df_var_dict = df_var_dict.rename(columns={'index':'code'})

## removes unnecessary column
df_var_dict = df_var_dict.drop('variables',axis=1)

## the data dictionary does not include margin of error estimates, we need to ammed with those codes
## makes a new dataframe as a copy of the existing data dictionary
df_var_dict_copy = df_var_dict.copy()

## replaces values in this new dataframe so that we have Margin of Error estimates
df_var_dict_copy['code'] = df_var_dict_copy['code'].str.replace('E','M')
df_var_dict_copy['label'] = df_var_dict_copy['label'].str.replace('Estimate!!','Margin of Error!!')

## combines the new dataframe with our original data dictionary
df_var_dict2 = pd.concat([df_var_dict,df_var_dict_copy], ignore_index=True)

## creates a dictionary for renaming column headers in the ACS data
rename_headers = dict(zip(df_var_dict2['code'],df_var_dict2['label']))

## the following code cleans the ACS data -- renames the headers in the ACS data
df = df.rename(columns=rename_headers)

## removes all empty columns
df = df.dropna(axis=1, how='all')

## converts 'Geography' to string type
df['Geography'] = df['Geography'].astype(str)

## creates an additional column with census tract IDs to join with Chicago community area data
df ['TRACTCE10'] = df['Geography'].str.slice(14,21)
df['TRACTCE10'] =df['TRACTCE10'].astype(int)

## now we need community area data from the Chicago Data portal to match with  census tracts
## read csv file downloaded directly from the City of Chicago Data Portal "https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-Census-Tracts-2010/5jrd-6zik"
## this can be accessed via an API but the Data Portal requires an API token
df_comm_areas= pd.read_csv('/content/CensusTractsTIGER2010_20250821.csv', encoding='latin1')

## transforms geometry into shapely objects
df_comm_areas['the_geom'] = df_comm_areas['the_geom'].apply(wkt.loads)

## converts into a geodataframe and sets the coordinate reference system (crs)
gdf_comm_areas=gpd.GeoDataFrame(df_comm_areas, geometry='the_geom', crs='EPSG:4326')

## merges ACS data with Chicago Community Areas -- this will also remove any census tracts that are not located in Chicago community areas
merged_acs = gdf_comm_areas.merge(df,on='TRACTCE10', how='inner')

## cleans merged data by dropping unnecessary columns
merged_acs_to_export = merged_acs.drop(columns=['STATEFP10','COUNTYFP10','NAME10','NAMELSAD10','COMMAREA_N','NOTES'])

## from here we can further parse the data by removing any columns we aren't interested in
## define the columns we want to maintain
columns_to_keep = ['TRACTCE10','the_geom','COMMAREA','Estimate!!Total!!Households','Estimate!!Percent households receiving food stamps/SNAP!!Households', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!With one or more people in the household 60 years and over', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!Married-couple family', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!With children under 18 years', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!POVERTY STATUS IN THE PAST 12 MONTHS!!Below poverty level', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!DISABILITY STATUS!!With one or more people with a disability', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!American Indian and Alaska Native alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Asian alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Native Hawaiian and Other Pacific Islander alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Some other race alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Two or more races', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Hispanic or Latino origin (of any race)', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!White alone, not Hispanic or Latino', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2023 INFLATION-ADJUSTED DOLLARS)!!Median income (dollars)', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!No workers in past 12 months', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!1 worker in past 12 months', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!2 or more workers in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!Households', 'Estimate!!Households receiving food stamps/SNAP!!Households!!With one or more people in the household 60 years and over', 'Estimate!!Households receiving food stamps/SNAP!!Households!!Married-couple family', 'Estimate!!Households receiving food stamps/SNAP!!Households!!With children under 18 years', 'Estimate!!Households receiving food stamps/SNAP!!Households!!POVERTY STATUS IN THE PAST 12 MONTHS!!Below poverty level', 'Estimate!!Households receiving food stamps/SNAP!!Households!!DISABILITY STATUS!!With one or more people with a disability', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!American Indian and Alaska Native alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Asian alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Native Hawaiian and Other Pacific Islander alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Some other race alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Two or more races', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Hispanic or Latino origin (of any race)', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!White alone, not Hispanic or Latino', 'Estimate!!Households receiving food stamps/SNAP!!Households!!HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2023 INFLATION-ADJUSTED DOLLARS)!!Median income (dollars)', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!No workers in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!1 worker in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!2 or more workers in past 12 months']

## remove any unnecessary columns
ACS = merged_acs_to_export[columns_to_keep]

## columns need to be translated into integer data type
## identifies the columns that need to be integers
convert_to_int = ['Estimate!!Total!!Households','Estimate!!Percent households receiving food stamps/SNAP!!Households', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!With one or more people in the household 60 years and over', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!Married-couple family', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!With children under 18 years', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!POVERTY STATUS IN THE PAST 12 MONTHS!!Below poverty level', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!DISABILITY STATUS!!With one or more people with a disability', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!American Indian and Alaska Native alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Asian alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Native Hawaiian and Other Pacific Islander alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Some other race alone', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Two or more races', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Hispanic or Latino origin (of any race)', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!White alone, not Hispanic or Latino', 'Estimate!!Percent households receiving food stamps/SNAP!!Households!!HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2023 INFLATION-ADJUSTED DOLLARS)!!Median income (dollars)', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!No workers in past 12 months', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!1 worker in past 12 months', 'Estimate!!Percent households receiving food stamps/SNAP!!WORK STATUS!!Families!!2 or more workers in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!Households', 'Estimate!!Households receiving food stamps/SNAP!!Households!!With one or more people in the household 60 years and over', 'Estimate!!Households receiving food stamps/SNAP!!Households!!Married-couple family', 'Estimate!!Households receiving food stamps/SNAP!!Households!!With children under 18 years', 'Estimate!!Households receiving food stamps/SNAP!!Households!!POVERTY STATUS IN THE PAST 12 MONTHS!!Below poverty level', 'Estimate!!Households receiving food stamps/SNAP!!Households!!DISABILITY STATUS!!With one or more people with a disability', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!American Indian and Alaska Native alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Asian alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Native Hawaiian and Other Pacific Islander alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Some other race alone', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Two or more races', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!Hispanic or Latino origin (of any race)', 'Estimate!!Households receiving food stamps/SNAP!!Households!!RACE AND HISPANIC OR LATINO ORIGIN OF HOUSEHOLDER!!White alone, not Hispanic or Latino', 'Estimate!!Households receiving food stamps/SNAP!!Households!!HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2023 INFLATION-ADJUSTED DOLLARS)!!Median income (dollars)', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!No workers in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!1 worker in past 12 months', 'Estimate!!Households receiving food stamps/SNAP!!WORK STATUS!!Families!!2 or more workers in past 12 months']

## creates a function that locates columns that need to be turned into integer type and turns values into int or 0 if NaN
def make_int(df):
    for col in convert_to_int:
        df.loc[:, col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)
    return df

## calls function for ACS dataframe
ACS_INT = make_int(ACS)

ACS_INT.to_file("ACS.geojson")

### SNAP RETAILERS ###

## define zip codes
chicago_zip_codes = [60601, 60602, 60603, 60604, 60605, 60606, 60607, 60608, 60609, 60610, 60611, 60612, 60613, 60614, 60615, 60616, 60617, 60618, 60619, 60620, 60621, 60622, 60623, 60624, 60625, 60626, 60628, 60629, 60630, 60631, 60632, 60633, 60634, 60636, 60637, 60638, 60639, 60640, 60641, 60643, 60644, 60645, 60646, 60647, 60649, 60651, 60652, 60653, 60654, 60655, 60656, 60657, 60659, 60660, 60661, 60664, 60666, 60680, 60681, 60690, 60691, 60701, 60706, 60707, 60803, 60804, 60805, 60827]

## read csv file downloaded directly from the Dep of Agriculture Website "https://www.fns.usda.gov/snap/retailer-locator/data"
df= pd.read_csv('/content/Historical SNAP Retailer Locator Data 2004-2024.csv', encoding='latin1')

## converts latitute and longitude into POINT types and sets the coordinate reference system (crs)
geometry = gpd.points_from_xy(df.Longitude, df.Latitude)
gdf = gpd.GeoDataFrame(df, geometry=geometry)
gdf.set_crs("EPSG:4326", inplace=True)

## grab the community areas geojson
community_areas = gpd.read_file("/content/Boundaries - Community Areas_20250722.geojson")

## add a column to get the square mileage of each community area
community_areas_sqmi = community_areas.to_crs(epsg=3435)
community_areas['area_sqmi'] = community_areas_sqmi.geometry.area/27878400

## join the data to get the community areas assigned to each store
## this de-facto will filter the data by only those stores located within Chicago community areas
stores_with_community_areas = gpd.sjoin(gdf, community_areas, how="inner")

## filters the data by Chicago Zip Codes - there are some data entry errors in how "Chicago" is spelled so this cuts down on our data so we can more accurately clean it
## gdf_filtered = gdf[gdf['Zip Code'].isin(chicago_zip_codes)]

## gathers city names that are similar to "Chicago"
## def is_similar_to_chicago(name, threshold=80):
    ## return fuzz.partial_ratio(str(name).lower(), "Chicago") >= threshold
## city_names = [city for city in gdf_filtered['City'].dropna().unique() if is_similar_to_chicago(city)]
## city_names.append('Chicago')

## filters the data so that only "Chicago" and misspellings of "Chicago" are included
## gdf_filtered2 = gdf_filtered[gdf_filtered['City'].isin(city_names)]

## converts 'City' to str type
stores_with_community_areas.loc[:, 'City'] = pd.to_numeric(stores_with_community_areas['City'], errors = 'coerce').fillna(0).astype(str)

## replaces all mispelled vartiatons of "Chicago" with the proper spelling
stores_with_community_areas.loc[:,'City']="Chicago"

## filter the dataset by stores that are currenlty operating
current_stores_with_community_areas = stores_with_community_areas[stores_with_community_areas['End Date'].isna()]

## converts columns to integers so they can be aggregated
SNAP_convert_to_int = ['Record ID','Street Number','Zip Code','area_numbe']
def make_int(df):
    for col in SNAP_convert_to_int:
        df.loc[:, col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)
    return df

SNAP_Retailers_int= make_int(current_stores_with_community_areas)

## remove unnecessary columns
SNAP_Retailers = SNAP_Retailers_int.drop(columns=['area_num_1','Zip4','shape_len','area_num_1','Additional Address','shape_area','index_right'])

## convert to file
SNAP_Retailers.to_file("SNAP_Retailers.geojson")

## convert [Authorization Date] to datetime
SNAP_Retailers['Authorization Date'] = pd.to_datetime(SNAP_Retailers['Authorization Date'])

## add a column to give the amount of time since opening
## in days
SNAP_Retailers['Days Open'] = (pd.Timestamp.today() - SNAP_Retailers['Authorization Date']).dt.days
## in years
SNAP_Retailers['Aprox Years Open'] = SNAP_Retailers['Days Open']/365

## convert store type to str
SNAP_Retailers['Store Type'] = SNAP_Retailers['Store Type'].astype(str)

### TRANSLATE FILES TO COMMUNITY AREA LEVEL ###

## Get aggregated community area level data for SNAP retailers
SNAP_STORES_AGG = (
    SNAP_Retailers.drop('geometry', axis=1)
        .groupby(['area_numbe'])
        .agg(Community_Area = ('community', 'first'),
             Store_Count = ('Record ID', 'count'),
             Convenience_Store =('Store Type', lambda x: (x == 'Convenience Store').sum()),
             Combination_Grocery_Other = ('Store Type', lambda x: (x == 'Combination Grocery/Other').sum()),
             Large_Grocery_Store = ('Store Type', lambda x: (x == 'Large Grocery Store').sum()),
             Medium_Grocery_Store = ('Store Type', lambda x: (x == 'Medium Grocery Store').sum()),
             Small_Grocery_Store = ('Store Type', lambda x: (x == 'Small Grocery Store').sum()),
             Supermarket = ('Store Type', lambda x: (x == 'Supermarket').sum()),
             Super_Store = ('Store Type', lambda x: (x == 'Super Store').sum()),
             Meat_Poultry_Specialty = ('Store Type', lambda x: (x == 'Meat/Poultry Specialty').sum()),
             Delivery_Route = ('Store Type', lambda x: (x == 'Delivery Route').sum()),
             Military_Commissary = ('Store Type', lambda x: (x == 'Military Commissary').sum()),
             Farmers_Market = ('Store Type', lambda x: (x == "Farmers' Market").sum()),
             Bakery_Specialty = ('Store Type', lambda x: (x == 'Bakery Specialty').sum()),
             Unknown = ('Store Type', lambda x: (x == 'Unknown').sum()),
             Fruits_Veg_Specialty = ('Store Type', lambda x: (x == 'Fruits/Veg Specialty').sum()),
             Food_Buying_Coop = ('Store Type', lambda x: (x == 'Food Buying Co-op').sum()),
             Seafood_Specialty = ('Store Type', lambda x: (x == 'Seafood Specialty').sum()),
             Wholesaler = ('Store Type', lambda x: (x == 'Wholesaler').sum()),
             Area_Sq_Mi = ('area_sqmi', 'first'),
             Average_Time_Open_Yrs = ('Aprox Years Open', 'mean'),
             Average_Time_Open_Days = ('Days Open', 'mean')
        )
        .reset_index()
        .rename(columns={'area_numbe':'Community_Area_Number'})
)

## Get aggregated community area level data for ACS

ACS_AGG = (
    ACS_INT
        .groupby(['COMMAREA'])
        .agg(Total_Households = ('Estimate!!Total!!Households', 'sum'),
             SNAP_Households = ('Estimate!!Households receiving food stamps/SNAP!!Households', 'sum'),
             PCT_SNAP_Households = ('Estimate!!Percent households receiving food stamps/SNAP!!Households', 'mean'),
             geometry=('the_geom','first')
        )
        .reset_index()
        .rename(columns={'COMMAREA':'Community_Area_Number'})
)

## make this a geo dataframe to maintain multipolygon community areas
ACS_AGG_JOIN = gpd.GeoDataFrame(ACS_AGG,geometry='geometry',crs='EPSG:4326')

## merge dataframes into one
SNAP_Analysis = ACS_AGG_JOIN.merge(SNAP_STORES_AGG, on='Community_Area_Number', how='left')

## exports analysis data as a geojson file
SNAP_Analysis.to_file('SNAP_Analysis.geojson', driver='GeoJSON')

## exports analysis data as a csv without geo data
SNAP_Analysis_CSV = SNAP_Analysis.drop(columns='geometry')
SNAP_Analysis_CSV.to_csv('SNAP_Analysis.csv',index=False)

